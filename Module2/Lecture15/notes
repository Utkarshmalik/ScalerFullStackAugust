Event Propagation

There are two main phases of event propagation: capturing phase and bubbling phase.

During these phases, events can propagate through the DOM tree from the root to the target element (capturing) or from the target element back up to the root (bubbling).

Concept of Event Bubbling

Event bubbling is a type of event propagation in the DOM where an event not only triggers the event handlers on the target element (the element on which the event occurred) but also triggers event handlers on its ancestor elements in the hierarchy, bubbling up from the target element to the root of the document.

The capturing phase is initiated from the document down towards the child. First, the grandparent's click event listener is triggered, logging "Grandparent clicked (Capturing)".

The event continues to propagate to the parent, triggering its event listener and logging "Parent clicked (Capturing)".

Finally, the event reaches the child, its event listener is triggered, and it logs "Child clicked (Capturing)".



Event Propagation Cycle

Now as you understand the concepts of Bubbling and Capturing , There is a cycle that we can understand known as Event Propagation cycle

The event propagation cycle refers to the sequence of phases through which an event travels within the Document Object Model (DOM) hierarchy. There are two main phases in the event propagation cycle and the target Element

the capturing phase and the bubbling phase. Here's an overview of the cycle:

Capturing Phase:

The event starts at the root of the DOM tree (typically the <html> element).
The event travels down the DOM tree through each ancestor element of the target element.
During this phase, event handlers registered with the capturing phase (useCapture set to true) are triggered on each ancestor element in the order they appear in the hierarchy from the root to the target.
The event reaches the target element.

Target Phase:

The event reaches the target element for which the event was triggered.
Event handlers registered on the target element are executed.

Bubbling Phase:

After the target phase, the event travels back up the DOM tree in reverse order.
Event handlers registered with the bubbling phase (useCapture set to false) are triggered on each ancestor element in the reverse order from the target to the root.
The event eventually reaches the root of the DOM tree.



Image : https://camo.githubusercontent.com/1352b2956a46b5e86a223dd89c606304c624f9b71074a21102a33c050aad4d5c/68747470733a2f2f6a6176617363726970742e696e666f2f61727469636c652f627562626c696e672d616e642d636170747572696e672f6576656e74666c6f772e737667







Event delegation is a powerful pattern in JavaScript, particularly useful when working with dynamically added elements or when optimizing performance for applications with many event listeners.


It leverages the fact that most events in JavaScript bubble up through the DOM, meaning that an event fired on a child node will propagate up to its parent nodes.


By taking advantage of this behavior, you can set a single event listener on a parent element to manage all events that bubble up from its children, rather than setting an event listener on each child individually.

